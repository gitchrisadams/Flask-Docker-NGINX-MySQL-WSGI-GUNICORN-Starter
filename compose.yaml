services:
  # NGINX Proxy
  nginx-proxy:
    build: nginx
    restart: always
    volumes:
      - ./nginx/default.conf:/tmp/default.conf
    environment: 
      - FLASK_SERVER_ADDR=flask-app:8000
    ports:
      - "80:80"
    depends_on:
      - flask-app
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:80/health-check || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    command: /app/start.sh

  # Flask Web App
  flask-app:
    build: website
    restart: always
    ports: 
      - '8000:8000'

    # MYSQL environment
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONUNBUFFERED=1

    # Postgres environement
    # environment:
    #   - DATABASE_URL=${POSTGRES_DATABASE_URL}
    #   - PYTHONUNBUFFERED=1

    # SQL LITE Volume:
    # volumes:
    #   - ./db/:/my/sqlite/path/


    # Health Check for MYSQL ONLY:
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8000/flask-health-check || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      database:
        condition: service_healthy

    # Run the App
    command: gunicorn -w 3 -t 60 -b 0.0.0.0:8000 app:app

  # SQL Lite:
  # sqlite3:
  #   image: nouchka/sqlite3:latest
  #   stdin_open: true
  #   tty: true
  #   volumes:
  #     - ./db/:/root/db/


  # MYSQL Database
  database:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ./db_data:/var/lib/mysql
    ports:
      - 3307:3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Postgres Database:
  # database:
  #   image: postgres:17.6
  #   ports:
  #     - 5433:5432
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DATABASE}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - ./db_data_postgres:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 20s # Give PostgreSQL time to start up
  